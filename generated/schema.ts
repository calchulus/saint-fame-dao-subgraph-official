// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Uniswap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Uniswap entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Uniswap entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Uniswap", id.toString(), this);
  }

  static load(id: string): Uniswap | null {
    return store.get("Uniswap", id) as Uniswap | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get exchangeCount(): i32 {
    let value = this.get("exchangeCount");
    return value.toI32();
  }

  set exchangeCount(value: i32) {
    this.set("exchangeCount", Value.fromI32(value));
  }

  get exchanges(): Array<string> {
    let value = this.get("exchanges");
    return value.toStringArray();
  }

  set exchanges(value: Array<string>) {
    this.set("exchanges", Value.fromStringArray(value));
  }

  get totalVolumeInEth(): BigDecimal {
    let value = this.get("totalVolumeInEth");
    return value.toBigDecimal();
  }

  set totalVolumeInEth(value: BigDecimal) {
    this.set("totalVolumeInEth", Value.fromBigDecimal(value));
  }

  get totalLiquidityInEth(): BigDecimal {
    let value = this.get("totalLiquidityInEth");
    return value.toBigDecimal();
  }

  set totalLiquidityInEth(value: BigDecimal) {
    this.set("totalLiquidityInEth", Value.fromBigDecimal(value));
  }

  get totalVolumeUSD(): BigDecimal {
    let value = this.get("totalVolumeUSD");
    return value.toBigDecimal();
  }

  set totalVolumeUSD(value: BigDecimal) {
    this.set("totalVolumeUSD", Value.fromBigDecimal(value));
  }

  get totalLiquidityUSD(): BigDecimal {
    let value = this.get("totalLiquidityUSD");
    return value.toBigDecimal();
  }

  set totalLiquidityUSD(value: BigDecimal) {
    this.set("totalLiquidityUSD", Value.fromBigDecimal(value));
  }

  get totalTokenSells(): BigInt {
    let value = this.get("totalTokenSells");
    return value.toBigInt();
  }

  set totalTokenSells(value: BigInt) {
    this.set("totalTokenSells", Value.fromBigInt(value));
  }

  get totalTokenBuys(): BigInt {
    let value = this.get("totalTokenBuys");
    return value.toBigInt();
  }

  set totalTokenBuys(value: BigInt) {
    this.set("totalTokenBuys", Value.fromBigInt(value));
  }

  get totalAddLiquidity(): BigInt {
    let value = this.get("totalAddLiquidity");
    return value.toBigInt();
  }

  set totalAddLiquidity(value: BigInt) {
    this.set("totalAddLiquidity", Value.fromBigInt(value));
  }

  get totalRemoveLiquidity(): BigInt {
    let value = this.get("totalRemoveLiquidity");
    return value.toBigInt();
  }

  set totalRemoveLiquidity(value: BigInt) {
    this.set("totalRemoveLiquidity", Value.fromBigInt(value));
  }

  get exchangeHistoryEntityCount(): BigInt {
    let value = this.get("exchangeHistoryEntityCount");
    return value.toBigInt();
  }

  set exchangeHistoryEntityCount(value: BigInt) {
    this.set("exchangeHistoryEntityCount", Value.fromBigInt(value));
  }

  get uniswapHistoryEntityCount(): BigInt {
    let value = this.get("uniswapHistoryEntityCount");
    return value.toBigInt();
  }

  set uniswapHistoryEntityCount(value: BigInt) {
    this.set("uniswapHistoryEntityCount", Value.fromBigInt(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }
}

export class Exchange extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Exchange entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Exchange entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Exchange", id.toString(), this);
  }

  static load(id: string): Exchange | null {
    return store.get("Exchange", id) as Exchange | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get tokenSymbol(): string | null {
    let value = this.get("tokenSymbol");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenSymbol(value: string | null) {
    if (value === null) {
      this.unset("tokenSymbol");
    } else {
      this.set("tokenSymbol", Value.fromString(value as string));
    }
  }

  get tokenName(): string | null {
    let value = this.get("tokenName");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenName(value: string | null) {
    if (value === null) {
      this.unset("tokenName");
    } else {
      this.set("tokenName", Value.fromString(value as string));
    }
  }

  get tokenDecimals(): i32 {
    let value = this.get("tokenDecimals");
    return value.toI32();
  }

  set tokenDecimals(value: i32) {
    this.set("tokenDecimals", Value.fromI32(value));
  }

  get fee(): BigDecimal {
    let value = this.get("fee");
    return value.toBigDecimal();
  }

  set fee(value: BigDecimal) {
    this.set("fee", Value.fromBigDecimal(value));
  }

  get version(): i32 {
    let value = this.get("version");
    return value.toI32();
  }

  set version(value: i32) {
    this.set("version", Value.fromI32(value));
  }

  get startTime(): i32 {
    let value = this.get("startTime");
    return value.toI32();
  }

  set startTime(value: i32) {
    this.set("startTime", Value.fromI32(value));
  }

  get ethLiquidity(): BigDecimal {
    let value = this.get("ethLiquidity");
    return value.toBigDecimal();
  }

  set ethLiquidity(value: BigDecimal) {
    this.set("ethLiquidity", Value.fromBigDecimal(value));
  }

  get tokenLiquidity(): BigDecimal {
    let value = this.get("tokenLiquidity");
    return value.toBigDecimal();
  }

  set tokenLiquidity(value: BigDecimal) {
    this.set("tokenLiquidity", Value.fromBigDecimal(value));
  }

  get ethBalance(): BigDecimal {
    let value = this.get("ethBalance");
    return value.toBigDecimal();
  }

  set ethBalance(value: BigDecimal) {
    this.set("ethBalance", Value.fromBigDecimal(value));
  }

  get tokenBalance(): BigDecimal {
    let value = this.get("tokenBalance");
    return value.toBigDecimal();
  }

  set tokenBalance(value: BigDecimal) {
    this.set("tokenBalance", Value.fromBigDecimal(value));
  }

  get combinedBalanceInEth(): BigDecimal {
    let value = this.get("combinedBalanceInEth");
    return value.toBigDecimal();
  }

  set combinedBalanceInEth(value: BigDecimal) {
    this.set("combinedBalanceInEth", Value.fromBigDecimal(value));
  }

  get combinedBalanceInUSD(): BigDecimal {
    let value = this.get("combinedBalanceInUSD");
    return value.toBigDecimal();
  }

  set combinedBalanceInUSD(value: BigDecimal) {
    this.set("combinedBalanceInUSD", Value.fromBigDecimal(value));
  }

  get totalUniToken(): BigDecimal {
    let value = this.get("totalUniToken");
    return value.toBigDecimal();
  }

  set totalUniToken(value: BigDecimal) {
    this.set("totalUniToken", Value.fromBigDecimal(value));
  }

  get addLiquidityCount(): BigInt {
    let value = this.get("addLiquidityCount");
    return value.toBigInt();
  }

  set addLiquidityCount(value: BigInt) {
    this.set("addLiquidityCount", Value.fromBigInt(value));
  }

  get removeLiquidityCount(): BigInt {
    let value = this.get("removeLiquidityCount");
    return value.toBigInt();
  }

  set removeLiquidityCount(value: BigInt) {
    this.set("removeLiquidityCount", Value.fromBigInt(value));
  }

  get sellTokenCount(): BigInt {
    let value = this.get("sellTokenCount");
    return value.toBigInt();
  }

  set sellTokenCount(value: BigInt) {
    this.set("sellTokenCount", Value.fromBigInt(value));
  }

  get buyTokenCount(): BigInt {
    let value = this.get("buyTokenCount");
    return value.toBigInt();
  }

  set buyTokenCount(value: BigInt) {
    this.set("buyTokenCount", Value.fromBigInt(value));
  }

  get lastPrice(): BigDecimal {
    let value = this.get("lastPrice");
    return value.toBigDecimal();
  }

  set lastPrice(value: BigDecimal) {
    this.set("lastPrice", Value.fromBigDecimal(value));
  }

  get price(): BigDecimal {
    let value = this.get("price");
    return value.toBigDecimal();
  }

  set price(value: BigDecimal) {
    this.set("price", Value.fromBigDecimal(value));
  }

  get tradeVolumeToken(): BigDecimal {
    let value = this.get("tradeVolumeToken");
    return value.toBigDecimal();
  }

  set tradeVolumeToken(value: BigDecimal) {
    this.set("tradeVolumeToken", Value.fromBigDecimal(value));
  }

  get tradeVolumeEth(): BigDecimal {
    let value = this.get("tradeVolumeEth");
    return value.toBigDecimal();
  }

  set tradeVolumeEth(value: BigDecimal) {
    this.set("tradeVolumeEth", Value.fromBigDecimal(value));
  }

  get tradeVolumeUSD(): BigDecimal {
    let value = this.get("tradeVolumeUSD");
    return value.toBigDecimal();
  }

  set tradeVolumeUSD(value: BigDecimal) {
    this.set("tradeVolumeUSD", Value.fromBigDecimal(value));
  }

  get totalValue(): BigDecimal {
    let value = this.get("totalValue");
    return value.toBigDecimal();
  }

  set totalValue(value: BigDecimal) {
    this.set("totalValue", Value.fromBigDecimal(value));
  }

  get weightedAvgPrice(): BigDecimal {
    let value = this.get("weightedAvgPrice");
    return value.toBigDecimal();
  }

  set weightedAvgPrice(value: BigDecimal) {
    this.set("weightedAvgPrice", Value.fromBigDecimal(value));
  }

  get totalTxsCount(): BigInt {
    let value = this.get("totalTxsCount");
    return value.toBigInt();
  }

  set totalTxsCount(value: BigInt) {
    this.set("totalTxsCount", Value.fromBigInt(value));
  }

  get lastPriceUSD(): BigDecimal {
    let value = this.get("lastPriceUSD");
    return value.toBigDecimal();
  }

  set lastPriceUSD(value: BigDecimal) {
    this.set("lastPriceUSD", Value.fromBigDecimal(value));
  }

  get priceUSD(): BigDecimal {
    let value = this.get("priceUSD");
    return value.toBigDecimal();
  }

  set priceUSD(value: BigDecimal) {
    this.set("priceUSD", Value.fromBigDecimal(value));
  }

  get weightedAvgPriceUSD(): BigDecimal {
    let value = this.get("weightedAvgPriceUSD");
    return value.toBigDecimal();
  }

  set weightedAvgPriceUSD(value: BigDecimal) {
    this.set("weightedAvgPriceUSD", Value.fromBigDecimal(value));
  }

  get factory(): string {
    let value = this.get("factory");
    return value.toString();
  }

  set factory(value: string) {
    this.set("factory", Value.fromString(value));
  }

  get tokenHolders(): Array<string> | null {
    let value = this.get("tokenHolders");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tokenHolders(value: Array<string> | null) {
    if (value === null) {
      this.unset("tokenHolders");
    } else {
      this.set("tokenHolders", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get exchangeBalances(): Array<string> {
    let value = this.get("exchangeBalances");
    return value.toStringArray();
  }

  set exchangeBalances(value: Array<string>) {
    this.set("exchangeBalances", Value.fromStringArray(value));
  }
}

export class UserExchangeData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UserExchangeData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UserExchangeData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UserExchangeData", id.toString(), this);
  }

  static load(id: string): UserExchangeData | null {
    return store.get("UserExchangeData", id) as UserExchangeData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get userAddress(): Bytes {
    let value = this.get("userAddress");
    return value.toBytes();
  }

  set userAddress(value: Bytes) {
    this.set("userAddress", Value.fromBytes(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get exchange(): string {
    let value = this.get("exchange");
    return value.toString();
  }

  set exchange(value: string) {
    this.set("exchange", Value.fromString(value));
  }

  get ethDeposited(): BigDecimal {
    let value = this.get("ethDeposited");
    return value.toBigDecimal();
  }

  set ethDeposited(value: BigDecimal) {
    this.set("ethDeposited", Value.fromBigDecimal(value));
  }

  get tokensDeposited(): BigDecimal {
    let value = this.get("tokensDeposited");
    return value.toBigDecimal();
  }

  set tokensDeposited(value: BigDecimal) {
    this.set("tokensDeposited", Value.fromBigDecimal(value));
  }

  get ethWithdrawn(): BigDecimal {
    let value = this.get("ethWithdrawn");
    return value.toBigDecimal();
  }

  set ethWithdrawn(value: BigDecimal) {
    this.set("ethWithdrawn", Value.fromBigDecimal(value));
  }

  get tokensWithdrawn(): BigDecimal {
    let value = this.get("tokensWithdrawn");
    return value.toBigDecimal();
  }

  set tokensWithdrawn(value: BigDecimal) {
    this.set("tokensWithdrawn", Value.fromBigDecimal(value));
  }

  get uniTokenBalance(): BigDecimal {
    let value = this.get("uniTokenBalance");
    return value.toBigDecimal();
  }

  set uniTokenBalance(value: BigDecimal) {
    this.set("uniTokenBalance", Value.fromBigDecimal(value));
  }

  get ethBought(): BigDecimal {
    let value = this.get("ethBought");
    return value.toBigDecimal();
  }

  set ethBought(value: BigDecimal) {
    this.set("ethBought", Value.fromBigDecimal(value));
  }

  get ethSold(): BigDecimal {
    let value = this.get("ethSold");
    return value.toBigDecimal();
  }

  set ethSold(value: BigDecimal) {
    this.set("ethSold", Value.fromBigDecimal(value));
  }

  get tokensBought(): BigDecimal {
    let value = this.get("tokensBought");
    return value.toBigDecimal();
  }

  set tokensBought(value: BigDecimal) {
    this.set("tokensBought", Value.fromBigDecimal(value));
  }

  get tokensSold(): BigDecimal {
    let value = this.get("tokensSold");
    return value.toBigDecimal();
  }

  set tokensSold(value: BigDecimal) {
    this.set("tokensSold", Value.fromBigDecimal(value));
  }

  get ethFeesPaid(): BigDecimal {
    let value = this.get("ethFeesPaid");
    return value.toBigDecimal();
  }

  set ethFeesPaid(value: BigDecimal) {
    this.set("ethFeesPaid", Value.fromBigDecimal(value));
  }

  get tokenFeesPaid(): BigDecimal {
    let value = this.get("tokenFeesPaid");
    return value.toBigDecimal();
  }

  set tokenFeesPaid(value: BigDecimal) {
    this.set("tokenFeesPaid", Value.fromBigDecimal(value));
  }

  get ethFeesInUSD(): BigDecimal {
    let value = this.get("ethFeesInUSD");
    return value.toBigDecimal();
  }

  set ethFeesInUSD(value: BigDecimal) {
    this.set("ethFeesInUSD", Value.fromBigDecimal(value));
  }

  get tokenFeesInUSD(): BigDecimal {
    let value = this.get("tokenFeesInUSD");
    return value.toBigDecimal();
  }

  set tokenFeesInUSD(value: BigDecimal) {
    this.set("tokenFeesInUSD", Value.fromBigDecimal(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Transaction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transaction", id.toString(), this);
  }

  static load(id: string): Transaction | null {
    return store.get("Transaction", id) as Transaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get exchangeAddress(): Bytes {
    let value = this.get("exchangeAddress");
    return value.toBytes();
  }

  set exchangeAddress(value: Bytes) {
    this.set("exchangeAddress", Value.fromBytes(value));
  }

  get addLiquidityEvents(): Array<string> | null {
    let value = this.get("addLiquidityEvents");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set addLiquidityEvents(value: Array<string> | null) {
    if (value === null) {
      this.unset("addLiquidityEvents");
    } else {
      this.set(
        "addLiquidityEvents",
        Value.fromStringArray(value as Array<string>)
      );
    }
  }

  get removeLiquidityEvents(): Array<string> | null {
    let value = this.get("removeLiquidityEvents");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set removeLiquidityEvents(value: Array<string> | null) {
    if (value === null) {
      this.unset("removeLiquidityEvents");
    } else {
      this.set(
        "removeLiquidityEvents",
        Value.fromStringArray(value as Array<string>)
      );
    }
  }

  get tokenPurchaseEvents(): Array<string> | null {
    let value = this.get("tokenPurchaseEvents");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tokenPurchaseEvents(value: Array<string> | null) {
    if (value === null) {
      this.unset("tokenPurchaseEvents");
    } else {
      this.set(
        "tokenPurchaseEvents",
        Value.fromStringArray(value as Array<string>)
      );
    }
  }

  get ethPurchaseEvents(): Array<string> | null {
    let value = this.get("ethPurchaseEvents");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set ethPurchaseEvents(value: Array<string> | null) {
    if (value === null) {
      this.unset("ethPurchaseEvents");
    } else {
      this.set(
        "ethPurchaseEvents",
        Value.fromStringArray(value as Array<string>)
      );
    }
  }

  get block(): i32 {
    let value = this.get("block");
    return value.toI32();
  }

  set block(value: i32) {
    this.set("block", Value.fromI32(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get fee(): BigDecimal {
    let value = this.get("fee");
    return value.toBigDecimal();
  }

  set fee(value: BigDecimal) {
    this.set("fee", Value.fromBigDecimal(value));
  }
}

export class AddLiquidityEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AddLiquidityEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AddLiquidityEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AddLiquidityEvent", id.toString(), this);
  }

  static load(id: string): AddLiquidityEvent | null {
    return store.get("AddLiquidityEvent", id) as AddLiquidityEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get ethAmount(): BigDecimal {
    let value = this.get("ethAmount");
    return value.toBigDecimal();
  }

  set ethAmount(value: BigDecimal) {
    this.set("ethAmount", Value.fromBigDecimal(value));
  }

  get tokenAmount(): BigDecimal {
    let value = this.get("tokenAmount");
    return value.toBigDecimal();
  }

  set tokenAmount(value: BigDecimal) {
    this.set("tokenAmount", Value.fromBigDecimal(value));
  }
}

export class RemoveLiquidityEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save RemoveLiquidityEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RemoveLiquidityEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RemoveLiquidityEvent", id.toString(), this);
  }

  static load(id: string): RemoveLiquidityEvent | null {
    return store.get("RemoveLiquidityEvent", id) as RemoveLiquidityEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get ethAmount(): BigDecimal {
    let value = this.get("ethAmount");
    return value.toBigDecimal();
  }

  set ethAmount(value: BigDecimal) {
    this.set("ethAmount", Value.fromBigDecimal(value));
  }

  get tokenAmount(): BigDecimal {
    let value = this.get("tokenAmount");
    return value.toBigDecimal();
  }

  set tokenAmount(value: BigDecimal) {
    this.set("tokenAmount", Value.fromBigDecimal(value));
  }
}

export class TokenPurchaseEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TokenPurchaseEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokenPurchaseEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokenPurchaseEvent", id.toString(), this);
  }

  static load(id: string): TokenPurchaseEvent | null {
    return store.get("TokenPurchaseEvent", id) as TokenPurchaseEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get ethAmount(): BigDecimal {
    let value = this.get("ethAmount");
    return value.toBigDecimal();
  }

  set ethAmount(value: BigDecimal) {
    this.set("ethAmount", Value.fromBigDecimal(value));
  }

  get tokenAmount(): BigDecimal {
    let value = this.get("tokenAmount");
    return value.toBigDecimal();
  }

  set tokenAmount(value: BigDecimal) {
    this.set("tokenAmount", Value.fromBigDecimal(value));
  }

  get tokenFee(): BigDecimal {
    let value = this.get("tokenFee");
    return value.toBigDecimal();
  }

  set tokenFee(value: BigDecimal) {
    this.set("tokenFee", Value.fromBigDecimal(value));
  }

  get ethFee(): BigDecimal {
    let value = this.get("ethFee");
    return value.toBigDecimal();
  }

  set ethFee(value: BigDecimal) {
    this.set("ethFee", Value.fromBigDecimal(value));
  }
}

export class EthPurchaseEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save EthPurchaseEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save EthPurchaseEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("EthPurchaseEvent", id.toString(), this);
  }

  static load(id: string): EthPurchaseEvent | null {
    return store.get("EthPurchaseEvent", id) as EthPurchaseEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get ethAmount(): BigDecimal {
    let value = this.get("ethAmount");
    return value.toBigDecimal();
  }

  set ethAmount(value: BigDecimal) {
    this.set("ethAmount", Value.fromBigDecimal(value));
  }

  get tokenAmount(): BigDecimal {
    let value = this.get("tokenAmount");
    return value.toBigDecimal();
  }

  set tokenAmount(value: BigDecimal) {
    this.set("tokenAmount", Value.fromBigDecimal(value));
  }

  get tokenFee(): BigDecimal {
    let value = this.get("tokenFee");
    return value.toBigDecimal();
  }

  set tokenFee(value: BigDecimal) {
    this.set("tokenFee", Value.fromBigDecimal(value));
  }

  get ethFee(): BigDecimal {
    let value = this.get("ethFee");
    return value.toBigDecimal();
  }

  set ethFee(value: BigDecimal) {
    this.set("ethFee", Value.fromBigDecimal(value));
  }
}

export class ExchangeHistoricalData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save ExchangeHistoricalData entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ExchangeHistoricalData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ExchangeHistoricalData", id.toString(), this);
  }

  static load(id: string): ExchangeHistoricalData | null {
    return store.get(
      "ExchangeHistoricalData",
      id
    ) as ExchangeHistoricalData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get exchangeAddress(): Bytes {
    let value = this.get("exchangeAddress");
    return value.toBytes();
  }

  set exchangeAddress(value: Bytes) {
    this.set("exchangeAddress", Value.fromBytes(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get ethLiquidity(): BigDecimal {
    let value = this.get("ethLiquidity");
    return value.toBigDecimal();
  }

  set ethLiquidity(value: BigDecimal) {
    this.set("ethLiquidity", Value.fromBigDecimal(value));
  }

  get tokenLiquidity(): BigDecimal {
    let value = this.get("tokenLiquidity");
    return value.toBigDecimal();
  }

  set tokenLiquidity(value: BigDecimal) {
    this.set("tokenLiquidity", Value.fromBigDecimal(value));
  }

  get ethBalance(): BigDecimal {
    let value = this.get("ethBalance");
    return value.toBigDecimal();
  }

  set ethBalance(value: BigDecimal) {
    this.set("ethBalance", Value.fromBigDecimal(value));
  }

  get tokenBalance(): BigDecimal {
    let value = this.get("tokenBalance");
    return value.toBigDecimal();
  }

  set tokenBalance(value: BigDecimal) {
    this.set("tokenBalance", Value.fromBigDecimal(value));
  }

  get combinedBalanceInEth(): BigDecimal {
    let value = this.get("combinedBalanceInEth");
    return value.toBigDecimal();
  }

  set combinedBalanceInEth(value: BigDecimal) {
    this.set("combinedBalanceInEth", Value.fromBigDecimal(value));
  }

  get combinedBalanceInUSD(): BigDecimal {
    let value = this.get("combinedBalanceInUSD");
    return value.toBigDecimal();
  }

  set combinedBalanceInUSD(value: BigDecimal) {
    this.set("combinedBalanceInUSD", Value.fromBigDecimal(value));
  }

  get totalUniToken(): BigDecimal {
    let value = this.get("totalUniToken");
    return value.toBigDecimal();
  }

  set totalUniToken(value: BigDecimal) {
    this.set("totalUniToken", Value.fromBigDecimal(value));
  }

  get tokenPriceUSD(): BigDecimal {
    let value = this.get("tokenPriceUSD");
    return value.toBigDecimal();
  }

  set tokenPriceUSD(value: BigDecimal) {
    this.set("tokenPriceUSD", Value.fromBigDecimal(value));
  }

  get price(): BigDecimal {
    let value = this.get("price");
    return value.toBigDecimal();
  }

  set price(value: BigDecimal) {
    this.set("price", Value.fromBigDecimal(value));
  }

  get tradeVolumeToken(): BigDecimal {
    let value = this.get("tradeVolumeToken");
    return value.toBigDecimal();
  }

  set tradeVolumeToken(value: BigDecimal) {
    this.set("tradeVolumeToken", Value.fromBigDecimal(value));
  }

  get tradeVolumeEth(): BigDecimal {
    let value = this.get("tradeVolumeEth");
    return value.toBigDecimal();
  }

  set tradeVolumeEth(value: BigDecimal) {
    this.set("tradeVolumeEth", Value.fromBigDecimal(value));
  }

  get tradeVolumeUSD(): BigDecimal {
    let value = this.get("tradeVolumeUSD");
    return value.toBigDecimal();
  }

  set tradeVolumeUSD(value: BigDecimal) {
    this.set("tradeVolumeUSD", Value.fromBigDecimal(value));
  }

  get totalTxsCount(): BigInt {
    let value = this.get("totalTxsCount");
    return value.toBigInt();
  }

  set totalTxsCount(value: BigInt) {
    this.set("totalTxsCount", Value.fromBigInt(value));
  }

  get feeInEth(): BigDecimal {
    let value = this.get("feeInEth");
    return value.toBigDecimal();
  }

  set feeInEth(value: BigDecimal) {
    this.set("feeInEth", Value.fromBigDecimal(value));
  }
}

export class ExchangeDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ExchangeDayData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ExchangeDayData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ExchangeDayData", id.toString(), this);
  }

  static load(id: string): ExchangeDayData | null {
    return store.get("ExchangeDayData", id) as ExchangeDayData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get exchangeAddress(): Bytes {
    let value = this.get("exchangeAddress");
    return value.toBytes();
  }

  set exchangeAddress(value: Bytes) {
    this.set("exchangeAddress", Value.fromBytes(value));
  }

  get ethBalance(): BigDecimal {
    let value = this.get("ethBalance");
    return value.toBigDecimal();
  }

  set ethBalance(value: BigDecimal) {
    this.set("ethBalance", Value.fromBigDecimal(value));
  }

  get tokenBalance(): BigDecimal {
    let value = this.get("tokenBalance");
    return value.toBigDecimal();
  }

  set tokenBalance(value: BigDecimal) {
    this.set("tokenBalance", Value.fromBigDecimal(value));
  }

  get marginalEthRate(): BigDecimal {
    let value = this.get("marginalEthRate");
    return value.toBigDecimal();
  }

  set marginalEthRate(value: BigDecimal) {
    this.set("marginalEthRate", Value.fromBigDecimal(value));
  }

  get ethVolume(): BigDecimal {
    let value = this.get("ethVolume");
    return value.toBigDecimal();
  }

  set ethVolume(value: BigDecimal) {
    this.set("ethVolume", Value.fromBigDecimal(value));
  }

  get tokenPriceUSD(): BigDecimal {
    let value = this.get("tokenPriceUSD");
    return value.toBigDecimal();
  }

  set tokenPriceUSD(value: BigDecimal) {
    this.set("tokenPriceUSD", Value.fromBigDecimal(value));
  }

  get totalEvents(): BigInt {
    let value = this.get("totalEvents");
    return value.toBigInt();
  }

  set totalEvents(value: BigInt) {
    this.set("totalEvents", Value.fromBigInt(value));
  }
}

export class UniswapDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UniswapDayData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniswapDayData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniswapDayData", id.toString(), this);
  }

  static load(id: string): UniswapDayData | null {
    return store.get("UniswapDayData", id) as UniswapDayData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get dailyVolumeInETH(): BigDecimal {
    let value = this.get("dailyVolumeInETH");
    return value.toBigDecimal();
  }

  set dailyVolumeInETH(value: BigDecimal) {
    this.set("dailyVolumeInETH", Value.fromBigDecimal(value));
  }

  get dailyVolumeInUSD(): BigDecimal {
    let value = this.get("dailyVolumeInUSD");
    return value.toBigDecimal();
  }

  set dailyVolumeInUSD(value: BigDecimal) {
    this.set("dailyVolumeInUSD", Value.fromBigDecimal(value));
  }

  get totalVolumeInEth(): BigDecimal {
    let value = this.get("totalVolumeInEth");
    return value.toBigDecimal();
  }

  set totalVolumeInEth(value: BigDecimal) {
    this.set("totalVolumeInEth", Value.fromBigDecimal(value));
  }

  get totalLiquidityInEth(): BigDecimal {
    let value = this.get("totalLiquidityInEth");
    return value.toBigDecimal();
  }

  set totalLiquidityInEth(value: BigDecimal) {
    this.set("totalLiquidityInEth", Value.fromBigDecimal(value));
  }

  get totalVolumeUSD(): BigDecimal {
    let value = this.get("totalVolumeUSD");
    return value.toBigDecimal();
  }

  set totalVolumeUSD(value: BigDecimal) {
    this.set("totalVolumeUSD", Value.fromBigDecimal(value));
  }

  get totalLiquidityUSD(): BigDecimal {
    let value = this.get("totalLiquidityUSD");
    return value.toBigDecimal();
  }

  set totalLiquidityUSD(value: BigDecimal) {
    this.set("totalLiquidityUSD", Value.fromBigDecimal(value));
  }

  get totalTokenSells(): BigInt {
    let value = this.get("totalTokenSells");
    return value.toBigInt();
  }

  set totalTokenSells(value: BigInt) {
    this.set("totalTokenSells", Value.fromBigInt(value));
  }

  get totalTokenBuys(): BigInt {
    let value = this.get("totalTokenBuys");
    return value.toBigInt();
  }

  set totalTokenBuys(value: BigInt) {
    this.set("totalTokenBuys", Value.fromBigInt(value));
  }

  get totalAddLiquidity(): BigInt {
    let value = this.get("totalAddLiquidity");
    return value.toBigInt();
  }

  set totalAddLiquidity(value: BigInt) {
    this.set("totalAddLiquidity", Value.fromBigInt(value));
  }

  get totalRemoveLiquidity(): BigInt {
    let value = this.get("totalRemoveLiquidity");
    return value.toBigInt();
  }

  set totalRemoveLiquidity(value: BigInt) {
    this.set("totalRemoveLiquidity", Value.fromBigInt(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }
}

export class UniswapHistoricalData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniswapHistoricalData entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniswapHistoricalData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniswapHistoricalData", id.toString(), this);
  }

  static load(id: string): UniswapHistoricalData | null {
    return store.get(
      "UniswapHistoricalData",
      id
    ) as UniswapHistoricalData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get totalVolumeInEth(): BigDecimal {
    let value = this.get("totalVolumeInEth");
    return value.toBigDecimal();
  }

  set totalVolumeInEth(value: BigDecimal) {
    this.set("totalVolumeInEth", Value.fromBigDecimal(value));
  }

  get totalLiquidityInEth(): BigDecimal {
    let value = this.get("totalLiquidityInEth");
    return value.toBigDecimal();
  }

  set totalLiquidityInEth(value: BigDecimal) {
    this.set("totalLiquidityInEth", Value.fromBigDecimal(value));
  }

  get totalVolumeUSD(): BigDecimal {
    let value = this.get("totalVolumeUSD");
    return value.toBigDecimal();
  }

  set totalVolumeUSD(value: BigDecimal) {
    this.set("totalVolumeUSD", Value.fromBigDecimal(value));
  }

  get totalLiquidityUSD(): BigDecimal {
    let value = this.get("totalLiquidityUSD");
    return value.toBigDecimal();
  }

  set totalLiquidityUSD(value: BigDecimal) {
    this.set("totalLiquidityUSD", Value.fromBigDecimal(value));
  }

  get totalTokenSells(): BigInt {
    let value = this.get("totalTokenSells");
    return value.toBigInt();
  }

  set totalTokenSells(value: BigInt) {
    this.set("totalTokenSells", Value.fromBigInt(value));
  }

  get totalTokenBuys(): BigInt {
    let value = this.get("totalTokenBuys");
    return value.toBigInt();
  }

  set totalTokenBuys(value: BigInt) {
    this.set("totalTokenBuys", Value.fromBigInt(value));
  }

  get totalAddLiquidity(): BigInt {
    let value = this.get("totalAddLiquidity");
    return value.toBigInt();
  }

  set totalAddLiquidity(value: BigInt) {
    this.set("totalAddLiquidity", Value.fromBigInt(value));
  }

  get totalRemoveLiquidity(): BigInt {
    let value = this.get("totalRemoveLiquidity");
    return value.toBigInt();
  }

  set totalRemoveLiquidity(value: BigInt) {
    this.set("totalRemoveLiquidity", Value.fromBigInt(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }
}
